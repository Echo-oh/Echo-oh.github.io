<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3.列表简介</title>
    <url>/2020/06/10/3.%E5%88%97%E8%A1%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="3-列表简介"><a href="#3-列表简介" class="headerlink" title="3.列表简介"></a>3.列表简介</h1><h2 id="3-1-列表是什么"><a href="#3-1-列表是什么" class="headerlink" title="3.1  列表是什么"></a>3.1  列表是什么</h2><p>列表由一系列按照特定顺序排列的元素组成，可以将任何东西放入列表，其中的元素之间可以没有任何关系；</p>
<p>由于列表通常包含多个元素，所以常给列表指定复数名称，比如说 <code>names</code></p>
<p>在<code>python</code>中，用方括号<code>[]</code>来表示列表，并用逗号来分隔其中的元素；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles=[<span class="string">'trek'</span>,<span class="string">'realine'</span>,<span class="string">'ancodea'</span>]</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-1-访问列表元素"><a href="#3-1-1-访问列表元素" class="headerlink" title="3.1.1  访问列表元素"></a>3.1.1  访问列表元素</h3><p>列表是有序集合，要访问列表的任何元素，只需将该元素的位置或索引告诉<code>python</code>即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles=[<span class="string">'trek'</span>,<span class="string">'realine'</span>,<span class="string">'ancodea'</span>]</span><br><span class="line">print(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-索引从-0-开始而不是-1-开始"><a href="#3-1-2-索引从-0-开始而不是-1-开始" class="headerlink" title="3.1.2  索引从 0 开始而不是 1 开始"></a>3.1.2  索引从 0 开始而不是 1 开始</h3><p>大部分编程语言中，索引都是从 0 开始，这与列表操作的底层实现有关，所以访问列表中的相关元素，只需将其位置减一即可</p>
<p><code>python</code>为访问最后一个列表元素提供了一种特殊语法，通过将索引指定为 -1，可以让其返回最后一个列表元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles=[<span class="string">'trek'</span>,<span class="string">'realine'</span>,<span class="string">'ancodea'</span>]</span><br><span class="line">print(bicycles[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>这种约定也适用于其它负数索引，比如说 -2 返回倒数第二个列表元素，索引 -3 返回倒数第三个列表元素，以此类推；</p>
<h3 id="3-1-3-使用列表中的各个值"><a href="#3-1-3-使用列表中的各个值" class="headerlink" title="3.1.3  使用列表中的各个值"></a>3.1.3  使用列表中的各个值</h3><p>列表中的每个元素，只要通过索引取得该元素，即可将其当做其它变量一样使用</p>
<h2 id="3-2-修改、添加和删除元素"><a href="#3-2-修改、添加和删除元素" class="headerlink" title="3.2  修改、添加和删除元素"></a>3.2  修改、添加和删除元素</h2><p>创建的列表大多数是动态的，会随着程序的运行增删元素</p>
<h3 id="3-2-1-修改列表元素"><a href="#3-2-1-修改列表元素" class="headerlink" title="3.2.1  修改列表元素"></a>3.2.1  修改列表元素</h3><p>修改列表元素之前，首先通过索引取到该元素，然后通过赋值语句修改</p>
<h3 id="3-2-2-在列表中添加元素"><a href="#3-2-2-在列表中添加元素" class="headerlink" title="3.2.2  在列表中添加元素"></a>3.2.2  在列表中添加元素</h3><p><code>python</code>提供了多种在既有列表中添加新元素的方法</p>
<h4 id="1-在列表末尾添加元素"><a href="#1-在列表末尾添加元素" class="headerlink" title="1.在列表末尾添加元素"></a>1.在列表末尾添加元素</h4><p>通过<code>append</code>方法可以将元素附加到列表末尾，而不影响列表中的其它元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[]</span><br><span class="line">motorcycles.append(<span class="string">'honda'</span>)</span><br><span class="line">motorcycles.append(<span class="string">'yamaha'</span>)</span><br><span class="line">motorcycles.append(<span class="string">'suzuki'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure>

<h4 id="2-在列表中插入元素"><a href="#2-在列表中插入元素" class="headerlink" title="2.在列表中插入元素"></a>2.在列表中插入元素</h4><p>通过<code>insert</code>方法可以在列表中的任何位置添加新元素；为此，你需要指定新元素的索引与值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">'honda'</span>,<span class="string">'yamaha'</span>,<span class="string">'suzuki'</span>]</span><br><span class="line">motorcycles.insert(<span class="number">0</span>,<span class="string">'ducati'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure>

<p>在上述例子中，<code>ducati</code>值被插入到了列表开头，方法<code>insert</code>在索引 0 处添加空间，并将新元素存储到这个地方，这种操作将列表中既有的每个元素都右移一个位置</p>
<h3 id="3-2-3-从列表中删除元素"><a href="#3-2-3-从列表中删除元素" class="headerlink" title="3.2.3  从列表中删除元素"></a>3.2.3  从列表中删除元素</h3><h4 id="1-使用-del-语句删除元素"><a href="#1-使用-del-语句删除元素" class="headerlink" title="1.使用 del 语句删除元素"></a>1.使用 del 语句删除元素</h4><p>如果知道元素在列表中的位置，可以直接通过<code>del</code>语句删除该元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">'honda'</span>,<span class="string">'yamaha'</span>,<span class="string">'suzuki'</span>]</span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure>

<h4 id="2-使用方法-pop-删除元素"><a href="#2-使用方法-pop-删除元素" class="headerlink" title="2.使用方法 pop 删除元素"></a>2.使用方法 pop 删除元素</h4><p><code>pop</code> 方法可以删除列表末尾的值，并让你能够接着使用它；列表就像一个栈，删除列表末尾的元素就像是弹出栈顶元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">'honda'</span>,<span class="string">'yamaha'</span>,<span class="string">'suzuki'</span>]</span><br><span class="line">print(motorcycles)</span><br><span class="line">popped_motorcycles=motorcycles.pop()</span><br><span class="line">print(motorcycles)</span><br><span class="line">print(popped_motorcycles)</span><br></pre></td></tr></table></figure>

<h4 id="3-弹出列表中任何位置的元素"><a href="#3-弹出列表中任何位置的元素" class="headerlink" title="3.弹出列表中任何位置的元素"></a>3.弹出列表中任何位置的元素</h4><p>实际上，可以利用<code>pop</code>方法来删除列表中任何位置的元素，只需要给<code>pop</code>方法传参，即要删除的元素在列表中的索引即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">'honda'</span>,<span class="string">'yamaha'</span>,<span class="string">'suzuki'</span>]</span><br><span class="line">first_owned=motorcycles.pop(<span class="number">0</span>)</span><br><span class="line">print(first_owned)</span><br></pre></td></tr></table></figure>

<h4 id="4-根据值删除元素"><a href="#4-根据值删除元素" class="headerlink" title="4.根据值删除元素"></a>4.根据值删除元素</h4><p>如果你不知道要删除的元素在列表中的位置，只知道要删除的元素的值，可以使用方法<code>remove</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">'honda'</span>,<span class="string">'yamaha'</span>,<span class="string">'suzuki'</span>,<span class="string">'ducati'</span>]</span><br><span class="line">motorcycles.remove(<span class="string">'ducati'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure>

<p>该方法只删除第一个指定的值，如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值</p>
<h2 id="3-3-组织列表"><a href="#3-3-组织列表" class="headerlink" title="3.3  组织列表"></a>3.3  组织列表</h2><p>在列表中，元素的排列顺序往往是无法预测的</p>
<h3 id="3-3-1-使用方法-sort-对列表进行永久性排序"><a href="#3-3-1-使用方法-sort-对列表进行永久性排序" class="headerlink" title="3.3.1  使用方法 sort 对列表进行永久性排序"></a>3.3.1  使用方法 sort 对列表进行永久性排序</h3><p><code>sort</code>方法可以轻松的对列表进行排序，但是目前来说，我还不确定其排序遵循的所有规则</p>
<p>而且该方法是对列表本身进行操作，会直接改变列表内部元素的排列顺序，所以是永久性排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>,<span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure>

<p><code>sort</code>方法默认是升序排序，如果想降序排序的话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>,<span class="string">'subaru'</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-使用函数-sorted-对列表进行临时排序"><a href="#3-3-2-使用函数-sorted-对列表进行临时排序" class="headerlink" title="3.3.2  使用函数 sorted 对列表进行临时排序"></a>3.3.2  使用函数 sorted 对列表进行临时排序</h3><p><code>sorted</code>与<code>sort</code>不同，后者是在列表本身上进行排序操作，所以是永久性排序；前者是复制出列表的一个副本，在副本上进行排序操作，并且将排好序的副本返回，所以列表本身没有变化</p>
<p>也可以向函数<code>sorted</code>中传入参数<code>reverse=True</code>反转排序顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>,<span class="string">'subaru'</span>]</span><br><span class="line">print(sorted(cars))</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-倒着打印列表"><a href="#3-3-3-倒着打印列表" class="headerlink" title="3.3.3  倒着打印列表"></a>3.3.3  倒着打印列表</h3><p>要反转元素的排列顺序，可调用<code>reverse</code>方法，该方法也是在列表本身上进行操作，也是永久性修改</p>
<p>该方法没有特定的排序规则，只是反转元素的排列顺序</p>
<p>想要将反转过顺序的列表还原，只要再调用一次该方法即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>,<span class="string">'subaru'</span>]</span><br><span class="line">print(cars)</span><br><span class="line">cars.reverse()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-4-确定列表的长度"><a href="#3-3-4-确定列表的长度" class="headerlink" title="3.3.4  确定列表的长度"></a>3.3.4  确定列表的长度</h3><p>使用函数<code>len</code>可快速获悉列表的长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars=[<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>,<span class="string">'subaru'</span>]</span><br><span class="line">print(len(cars))</span><br></pre></td></tr></table></figure>

<h2 id="3-4-使用列表时避免索引错误"><a href="#3-4-使用列表时避免索引错误" class="headerlink" title="3.4  使用列表时避免索引错误"></a>3.4  使用列表时避免索引错误</h2><p>要记住，索引始终是从 0 开始的，尽量避免索引错误</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python编程从入门到实践</tag>
      </tags>
  </entry>
</search>
